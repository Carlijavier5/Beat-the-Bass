//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MovementMap"",
            ""id"": ""93268723-e05f-4877-b702-100f43e49fe9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""58e46afe-fcc5-4589-9783-2510d94eda0b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4515799c-d8b3-49da-ad7a-5a97840074a9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43fa77f1-0b86-42f9-bef7-7598a2331801"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""985bce7a-1557-412e-80c1-c64a83e0faa8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1f49c6b8-c83e-4693-b7dc-615689dbe6f2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""484ebdeb-a95b-49ca-a9b7-96a4284a960f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f96e6fb5-bb4b-4d38-a1d4-6dc43d728b38"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""69624f2c-83d4-4293-b9a7-2915221244f0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e89611cd-c387-42bb-9a4f-3d69cfa67f9b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0b6c164a-019a-459b-88b0-4946abf86434"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f2c48a0-596c-4536-a041-4c12b49a8375"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""InteractionMap"",
            ""id"": ""28d25cbf-755c-4598-92b2-ee6268af7487"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f6ced651-3a45-48ca-9ca5-5e73f5fcac15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Beat"",
                    ""type"": ""Button"",
                    ""id"": ""82ad1768-3bb4-400d-8551-e4a344555e86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3cb5ffa6-453b-4739-8ada-70f552bd76b0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8d96146-25b4-4f33-aa78-4ec32d2d0cbf"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b2f1d87-967a-4db2-ad61-ad2e2d1ba9c2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Beat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df5f1c49-bd9b-4f6f-b2e8-e6601fd21738"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Beat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuInput"",
            ""id"": ""63cae577-b7c5-474b-ae08-7dce9a38ad33"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""f614cb1c-5e6b-49b4-8f47-cbb34855e9cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17b66602-c48b-4bf0-9799-ef8e351bd7a5"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovementMap
        m_MovementMap = asset.FindActionMap("MovementMap", throwIfNotFound: true);
        m_MovementMap_Move = m_MovementMap.FindAction("Move", throwIfNotFound: true);
        // InteractionMap
        m_InteractionMap = asset.FindActionMap("InteractionMap", throwIfNotFound: true);
        m_InteractionMap_Interact = m_InteractionMap.FindAction("Interact", throwIfNotFound: true);
        m_InteractionMap_Beat = m_InteractionMap.FindAction("Beat", throwIfNotFound: true);
        // MenuInput
        m_MenuInput = asset.FindActionMap("MenuInput", throwIfNotFound: true);
        m_MenuInput_StartGame = m_MenuInput.FindAction("StartGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementMap
    private readonly InputActionMap m_MovementMap;
    private List<IMovementMapActions> m_MovementMapActionsCallbackInterfaces = new List<IMovementMapActions>();
    private readonly InputAction m_MovementMap_Move;
    public struct MovementMapActions
    {
        private @PlayerInput m_Wrapper;
        public MovementMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MovementMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_MovementMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovementMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementMapActions instance)
        {
            if (m_Wrapper.m_MovementMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementMapActions @MovementMap => new MovementMapActions(this);

    // InteractionMap
    private readonly InputActionMap m_InteractionMap;
    private List<IInteractionMapActions> m_InteractionMapActionsCallbackInterfaces = new List<IInteractionMapActions>();
    private readonly InputAction m_InteractionMap_Interact;
    private readonly InputAction m_InteractionMap_Beat;
    public struct InteractionMapActions
    {
        private @PlayerInput m_Wrapper;
        public InteractionMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_InteractionMap_Interact;
        public InputAction @Beat => m_Wrapper.m_InteractionMap_Beat;
        public InputActionMap Get() { return m_Wrapper.m_InteractionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionMapActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Beat.started += instance.OnBeat;
            @Beat.performed += instance.OnBeat;
            @Beat.canceled += instance.OnBeat;
        }

        private void UnregisterCallbacks(IInteractionMapActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Beat.started -= instance.OnBeat;
            @Beat.performed -= instance.OnBeat;
            @Beat.canceled -= instance.OnBeat;
        }

        public void RemoveCallbacks(IInteractionMapActions instance)
        {
            if (m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionMapActions @InteractionMap => new InteractionMapActions(this);

    // MenuInput
    private readonly InputActionMap m_MenuInput;
    private List<IMenuInputActions> m_MenuInputActionsCallbackInterfaces = new List<IMenuInputActions>();
    private readonly InputAction m_MenuInput_StartGame;
    public struct MenuInputActions
    {
        private @PlayerInput m_Wrapper;
        public MenuInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_MenuInput_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_MenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuInputActions set) { return set.Get(); }
        public void AddCallbacks(IMenuInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuInputActionsCallbackInterfaces.Add(instance);
            @StartGame.started += instance.OnStartGame;
            @StartGame.performed += instance.OnStartGame;
            @StartGame.canceled += instance.OnStartGame;
        }

        private void UnregisterCallbacks(IMenuInputActions instance)
        {
            @StartGame.started -= instance.OnStartGame;
            @StartGame.performed -= instance.OnStartGame;
            @StartGame.canceled -= instance.OnStartGame;
        }

        public void RemoveCallbacks(IMenuInputActions instance)
        {
            if (m_Wrapper.m_MenuInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuInputActions @MenuInput => new MenuInputActions(this);
    public interface IMovementMapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IInteractionMapActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnBeat(InputAction.CallbackContext context);
    }
    public interface IMenuInputActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
}
